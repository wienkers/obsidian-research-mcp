/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var L=(c,s)=>{for(var e in s)y(c,e,{get:s[e],enumerable:!0})},k=(c,s,e,t)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of R(s))!w.call(c,n)&&n!==e&&y(c,n,{get:()=>s[n],enumerable:!(t=I(s,n))||t.enumerable});return c};var E=c=>k(y({},"__esModule",{value:!0}),c);var x={};L(x,{default:()=>f});module.exports=E(x);var i=require("obsidian");var h=class{constructor(s){this.smartConnectionsPlugin=null;this.app=s}async loadSmartConnections(){var t,n;let s=this.app.plugins,e=(t=s==null?void 0:s.plugins)==null?void 0:t["smart-connections"];return(n=e==null?void 0:e.env)!=null&&n.smart_sources?(this.smartConnectionsPlugin=e,console.log("Smart Connections v3.0+ detected"),!0):(console.log("Smart Connections v3.0+ not found"),!1)}isAvailable(){var s,e;return!!((e=(s=this.smartConnectionsPlugin)==null?void 0:s.env)!=null&&e.smart_sources)}async search(s){var e,t,n;if(!this.isAvailable())throw new Error("Smart Connections v3.0+ not available");try{let a={hypotheticals:[s.query],filter:{limit:((e=s.filter)==null?void 0:e.limit)||10,key_starts_with_any:(t=s.filter)==null?void 0:t.folders,exclude_key_starts_with_any:(n=s.filter)==null?void 0:n.excludeFolders}},r=await this.smartConnectionsPlugin.env.smart_sources.lookup(a);return{results:await Promise.all(r.map(async o=>({path:o.item.path,text:await o.item.read(),score:o.score,breadcrumbs:o.item.breadcrumbs||o.item.path})))}}catch(a){throw console.error("Smart Connections v3.0 search error:",a),a}}getVersionInfo(){return this.smartConnectionsPlugin?{version:"3.0+",type:"smart_sources"}:null}};var m=class{constructor(s){this.isInitialized=!1;this.app=s,this.smartConnections=new h(s)}async initialize(){try{let s=await this.smartConnections.loadSmartConnections();return this.isInitialized=s,s&&(console.log("Smart Connections adapter initialized successfully"),window.SmartConnectionsAdapter=this),s}catch(s){return console.error("Failed to initialize Smart Connections adapter:",s),!1}}async performSearch(s,e={}){if(!this.isInitialized)throw new Error("Smart Connections adapter not initialized");try{return await this.smartConnections.search({query:s,filter:{folders:e.folders,excludeFolders:e.excludeFolders,limit:e.limit||10}})}catch(t){throw console.error("Smart Connections search failed:",t),t}}isAvailable(){return this.isInitialized&&this.smartConnections.isAvailable()}getStatus(){return{initialized:this.isInitialized,available:this.isAvailable(),version:this.smartConnections.getVersionInfo()}}};var v=class{constructor(s="info",e="Research-MCP"){this.logLevel=s,this.prefix=e}updateLogLevel(s){this.logLevel=s}shouldLog(s){let e={error:0,warn:1,info:2,debug:3};return e[s]<=e[this.logLevel]}formatMessage(s,e,...t){let n=new Date().toISOString(),a=t.length>0?` ${t.map(r=>typeof r=="object"?JSON.stringify(r,null,2):String(r)).join(" ")}`:"";return`[${n}] [${this.prefix}] [${s.toUpperCase()}] ${e}${a}`}error(s,...e){this.shouldLog("error")&&console.error(this.formatMessage("error",s,...e))}warn(s,...e){this.shouldLog("warn")&&console.warn(this.formatMessage("warn",s,...e))}info(s,...e){this.shouldLog("info")&&console.log(this.formatMessage("info",s,...e))}debug(s,...e){this.shouldLog("debug")&&console.log(this.formatMessage("debug",s,...e))}};var M={localRestApiEnabled:!1,mcpServerPath:"",logLevel:"info",smartConnectionsEnabled:!0,apiKey:"",serverInstalled:!1},f=class extends i.Plugin{constructor(){super(...arguments);this.smartConnectionsRetryInterval=null;this.smartConnectionsDetected=!1}async onload(){if(await this.loadSettings(),this.logger=new v(this.settings.logLevel),this.smartConnectionsAdapter=new m(this.app),this.localRestApi=this.getLocalRestAPIInstance(),!this.localRestApi){new i.Notice("Local REST API plugin required for MCP Bridge",0);return}this.setupMCPIntegration(),this.setupSmartConnectionsDetection(),this.addRibbonIcon("brain-circuit","Research MCP Bridge",()=>{this.checkLocalRestApiStatus()}),this.addSettingTab(new C(this.app,this));let e=this.getLocalRestApiKey();e&&e!==this.settings.apiKey&&(this.settings.apiKey=e,this.saveSettings()),this.addCommands(),this.checkLocalRestApiPlugin(),this.logger.info("Research MCP Bridge Plugin loaded")}async onunload(){this.smartConnectionsRetryInterval&&(clearInterval(this.smartConnectionsRetryInterval),this.smartConnectionsRetryInterval=null),this.logger.info("Research MCP Bridge Plugin unloaded")}async loadSettings(){this.settings=Object.assign({},M,await this.loadData())}async saveSettings(){await this.saveData(this.settings),this.logger&&this.logger.updateLogLevel(this.settings.logLevel)}getLocalRestAPIInstance(){var t;let e=this.app.plugins;return(t=e==null?void 0:e.plugins)==null?void 0:t["obsidian-local-rest-api"]}setupMCPIntegration(){var e,t;if(this.localRestApi){let n=this.getLocalRestApiKey();n&&n!==this.settings.apiKey&&(this.settings.apiKey=n,this.saveSettings());try{let a=(t=(e=this.app.plugins.plugins["obsidian-local-rest-api"])==null?void 0:e.getPublicApi)==null?void 0:t.call(e,this.manifest);if(a&&a.addRoute)a.addRoute("/mcp/status").get(this.handleMCPStatus.bind(this)),a.addRoute("/mcp/vault-info").get(this.handleVaultInfo.bind(this)),a.addRoute("/search/smart").post(this.handleSmartSearch.bind(this)),a.addRoute("/backlinks/:notePath").get(this.handleBacklinks.bind(this)),this.logger.info("\u2705 MCP custom endpoints registered successfully, including Smart Connections search and backlinks");else throw new Error("Local REST API public API not available or does not support addRoute()")}catch(a){this.logger.error("\u274C Failed to register custom endpoints:",a),new i.Notice("Research MCP Bridge: Failed to register custom endpoints. Check Local REST API plugin version.",8e3)}}}handleBacklinks(e,t){try{let n=decodeURIComponent(e.params.notePath);if(!n||typeof n!="string"){t.status(400).json({error:"Invalid note path",message:"Note path parameter is required"});return}let a=n.endsWith(".md")?n:`${n}.md`,r=this.app.metadataCache.resolvedLinks,l=[];for(let[o,d]of Object.entries(r))if(d[a]||d[n]){let u=this.app.vault.getAbstractFileByPath(o);u&&u instanceof i.TFile&&l.push({path:o,name:u.basename})}this.logger.debug(`Found ${l.length} backlinks for "${n}"`),t.json({targetPath:a,backlinks:l,count:l.length})}catch(n){this.logger.error("Backlinks endpoint error:",n),t.status(500).json({error:"Backlinks search failed",message:n.message||"Unknown error occurred"})}}getLocalRestApiKey(){var n,a;let e=this.app.plugins,t=(n=e==null?void 0:e.plugins)==null?void 0:n["obsidian-local-rest-api"];return((a=t==null?void 0:t.settings)==null?void 0:a.apiKey)||""}handleMCPStatus(e,t){t.json({status:"active",plugin:"obsidian-research-mcp",version:this.manifest.version,apiKey:this.settings.apiKey?"configured":"missing",smartConnections:this.isSmartConnectionsAvailable()})}handleVaultInfo(e,t){t.json({name:this.app.vault.getName(),path:this.app.vault.adapter.basePath||"",fileCount:this.app.vault.getAllLoadedFiles().length})}async handleSmartSearch(e,t){var n,a,r,l;try{if(!this.smartConnectionsAdapter.isAvailable()){t.status(503).json({error:"Smart Connections v3.0+ plugin is not available",message:"Please install and enable Smart Connections plugin"});return}let o=e.body;if(!o.query||typeof o.query!="string"){t.status(400).json({error:"Invalid request body",message:"Query string is required"});return}let d=await this.smartConnectionsAdapter.performSearch(o.query,{folders:(n=o.filter)==null?void 0:n.folders,excludeFolders:(a=o.filter)==null?void 0:a.excludeFolders,limit:((r=o.filter)==null?void 0:r.limit)||10});this.logger.debug(`Smart Connections search completed: ${((l=d.results)==null?void 0:l.length)||0} results for "${o.query}"`),t.json(d)}catch(o){this.logger.error("Smart Connections search error:",o),t.status(500).json({error:"Smart Connections search failed",message:o.message||"Unknown error occurred"})}}setupSmartConnectionsDetection(){this.tryLoadSmartConnections(),this.app.workspace.onLayoutReady(()=>{this.smartConnectionsDetected||(this.logger.debug("Workspace ready - attempting Smart Connections detection"),this.tryLoadSmartConnections(),this.smartConnectionsDetected||this.startSmartConnectionsRetry())}),this.registerEvent(this.app.vault.on("config-changed",()=>{this.smartConnectionsDetected||this.tryLoadSmartConnections()}))}startSmartConnectionsRetry(){let e=0,t=12;this.smartConnectionsRetryInterval=setInterval(()=>{e++,this.logger.debug(`Smart Connections detection attempt ${e}/${t}`),(this.tryLoadSmartConnections()||e>=t)&&(this.smartConnectionsRetryInterval&&(clearInterval(this.smartConnectionsRetryInterval),this.smartConnectionsRetryInterval=null),e>=t&&!this.smartConnectionsDetected&&this.logger.warn("Smart Connections detection timed out - plugin may not be installed or enabled"))},5e3)}tryLoadSmartConnections(){var e,t;try{let n=this.app.plugins,a=(e=n==null?void 0:n.plugins)==null?void 0:e["smart-connections"];return a?(t=a.env)!=null&&t.smart_sources?(this.smartConnectionsAdapter.initialize().then(r=>{r&&!this.smartConnectionsDetected&&(this.smartConnectionsDetected=!0,this.logger.info("\u2705 Smart Connections v3.0+ detected and initialized successfully"),new i.Notice("Smart Connections v3.0+ integration ready",3e3),this.smartConnectionsRetryInterval&&(clearInterval(this.smartConnectionsRetryInterval),this.smartConnectionsRetryInterval=null))}).catch(r=>{this.logger.error("Error initializing Smart Connections adapter:",r)}),!0):(this.logger.debug("Smart Connections plugin found but v3.0+ API not available yet"),!1):(this.logger.debug("Smart Connections plugin not found in loaded plugins"),!1)}catch(n){return this.logger.error("Error during Smart Connections detection:",n),!1}}async loadSmartConnections(){try{await this.smartConnectionsAdapter.initialize()?(this.logger.info("Smart Connections adapter initialized successfully"),new i.Notice("Smart Connections v3.0+ integration ready",3e3)):this.logger.debug("Smart Connections v3.0+ not available")}catch(e){this.logger.error("Error loading Smart Connections:",e)}}isSmartConnectionsAvailable(){var e;return((e=this.smartConnectionsAdapter)==null?void 0:e.isAvailable())||!1}checkLocalRestApiPlugin(){var t;let e=this.app.plugins;this.localRestApiPlugin=(t=e==null?void 0:e.plugins)==null?void 0:t["obsidian-local-rest-api"],this.localRestApiPlugin?(this.settings.localRestApiEnabled=!0,this.saveSettings(),this.logger.info("Local REST API plugin detected")):this.logger.warn("Local REST API plugin not found")}checkLocalRestApiStatus(){this.localRestApiPlugin?new i.Notice(`\u2705 Local REST API plugin is available!

Use the external MCP server to connect Claude Desktop to your vault.`,4e3):new i.Notice(`\u274C Local REST API plugin not found.

Please install the 'Local REST API' plugin first.`,4e3)}addCommands(){this.addCommand({id:"show-vault-info",name:"Show Vault Information",callback:()=>{let e={name:this.app.vault.getName(),path:this.app.vault.adapter.basePath||"",fileCount:this.app.vault.getAllLoadedFiles().length,restApiAvailable:this.localRestApiPlugin?"Yes":"No"};new i.Notice(`Vault: ${e.name}
Files: ${e.fileCount}
Local REST API: ${e.restApiAvailable}`,5e3)}}),this.addCommand({id:"check-dependencies",name:"Check MCP Dependencies",callback:()=>{var a,r,l,o;let e=(r=(a=this.app.plugins)==null?void 0:a.plugins)==null?void 0:r["obsidian-local-rest-api"],t=(o=(l=this.app.plugins)==null?void 0:l.plugins)==null?void 0:o["smart-connections"],n=`
\u{1F50D} MCP Dependencies Status

\u{1F4E1} Local REST API: ${e?"\u2705 Available":"\u274C Not installed"}
\u{1F9E0} Smart Connections: ${t?"\u2705 Available":"\u274C Not installed"}

${e?"":`\u26A0\uFE0F Please install the "Local REST API" plugin to enable MCP communication.
`}
${t?"":`\u{1F4A1} Install "Smart Connections" plugin for semantic search capabilities.
`}
${e?"\u2705 Ready for MCP integration!":""}
        `.trim();new i.Notice(n,8e3)}}),this.addCommand({id:"list-vault-files",name:"List Vault Files",callback:()=>{let e=this.app.vault.getAllLoadedFiles(),t=e.slice(0,10).map(n=>`${n instanceof i.TFile?"\u{1F4C4}":"\u{1F4C1}"} ${n.name}`).join(`
`);new i.Notice(`\u{1F4DA} Vault Files (first 10):

${t}

${e.length>10?`...and ${e.length-10} more files`:""}`,7e3)}}),this.addCommand({id:"show-current-file",name:"Show Current File Details",callback:()=>{let e=this.app.workspace.getActiveFile();if(!e){new i.Notice("No active file selected",3e3);return}let t=`
\u{1F4C4} Current File Details

\u{1F4DD} Name: ${e.name}
\u{1F4C2} Path: ${e.path}
\u{1F4CA} Size: ${e.stat.size} bytes
\u{1F4C5} Modified: ${new Date(e.stat.mtime).toLocaleString()}
\u{1F3F7}\uFE0F Extension: ${e.extension}
        `.trim();new i.Notice(t,6e3)}}),this.addCommand({id:"show-file-backlinks",name:"Show File Backlinks",callback:()=>{let e=this.app.workspace.getActiveFile();if(!e){new i.Notice("No active file selected",3e3);return}let t=this.app.metadataCache.resolvedLinks,n=[];for(let[a,r]of Object.entries(t))if(r[e.path]){let l=this.app.vault.getAbstractFileByPath(a);l instanceof i.TFile&&n.push(l.basename)}if(n.length===0)new i.Notice(`No backlinks found for: ${e.name}`,3e3);else{let a=n.slice(0,5).join(`
`);new i.Notice(`\u{1F517} Backlinks for "${e.name}":

${a}

${n.length>5?`...and ${n.length-5} more`:""}`,6e3)}}}),this.addCommand({id:"install-mcp-server",name:"Install MCP Server",callback:async()=>{await this.installMCPServer()}}),this.addCommand({id:"configure-claude",name:"Configure Claude Desktop",callback:async()=>{await this.configureClaudeDesktop()}}),this.addCommand({id:"mcp-integration-guide",name:"MCP Integration Guide",callback:()=>{let e=this.settings.apiKey||"NOT_CONFIGURED",t=`
\u{1F680} MCP Integration Status

\u2705 Local REST API: ${this.localRestApiPlugin?"Available":"Missing"}
\u{1F511} API Key: ${this.settings.apiKey?"Configured":"Missing"}
\u{1F9E0} Smart Connections: ${this.isSmartConnectionsAvailable()?"Available":"Missing"}
\u{1F4E6} MCP Server: ${this.settings.serverInstalled?"Installed":"Not Installed"}

\u{1F527} Quick Setup:
1. Use 'Install MCP Server' command
2. Use 'Configure Claude Desktop' command
3. Restart Claude Desktop
4. Test with: "Can you read my Obsidian notes?"

\u{1F511} Current API Key: ${e}
        `.trim();new i.Notice(t,1e4)}})}async installMCPServer(){try{new i.Notice("Installing MCP Server...",2e3);let e={name:"obsidian-research-mcp",version:"1.0.0",apiKey:this.settings.apiKey,vaultPath:this.app.vault.adapter.basePath||""};this.settings.serverInstalled=!0,await this.saveSettings(),new i.Notice("MCP Server installed successfully!",3e3)}catch(e){new i.Notice("Failed to install MCP Server: "+e.message,5e3)}}async configureClaudeDesktop(){try{if(!this.settings.apiKey){new i.Notice("API Key not configured. Please check Local REST API plugin settings.",5e3);return}let e={mcpServers:{"obsidian-research-mcp":{command:"node",args:[this.settings.mcpServerPath||"./mcp-server/dist/index.js"],env:{OBSIDIAN_API_KEY:this.settings.apiKey,OBSIDIAN_API_URL:"https://127.0.0.1:27124",OBSIDIAN_VAULT_PATH:this.app.vault.adapter.basePath||""}}}},t=JSON.stringify(e,null,2);new S(this.app,t).open(),new i.Notice("Claude Desktop configuration generated. Add this to your claude_desktop_config.json file.",8e3)}catch(e){new i.Notice("Failed to generate configuration: "+e.message,5e3)}}},C=class extends i.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){var o,d,u,b,P,A;let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Research MCP Bridge Settings"});let t=e.createEl("div");t.innerHTML=`
      <p>This plugin enables <strong>Model Context Protocol (MCP)</strong> integration by working with the <strong>Local REST API</strong> plugin.</p>
      <p><strong>Local REST API Status:</strong> ${this.plugin.localRestApiPlugin?"\u{1F7E2} Available":"\u{1F534} Not Found"}</p>
      <p><strong>Smart Connections:</strong> ${(d=(o=this.app.plugins)==null?void 0:o.plugins)!=null&&d["smart-connections"]?"\u{1F7E2} Available":"\u{1F534} Not Found"}</p>
      <hr>
    `,new i.Setting(e).setName("MCP Server Path").setDesc("Path to the external MCP server executable (optional)").addText(g=>g.setPlaceholder("/path/to/mcp-server").setValue(this.plugin.settings.mcpServerPath).onChange(async p=>{this.plugin.settings.mcpServerPath=p,await this.plugin.saveSettings()})),new i.Setting(e).setName("API Key").setDesc("Local REST API key (automatically detected from Local REST API plugin)").addText(g=>g.setPlaceholder("Auto-detected from Local REST API plugin").setValue(this.plugin.settings.apiKey).setDisabled(!0)),new i.Setting(e).setName("Refresh API Key").setDesc("Manually refresh the API key from Local REST API plugin").addButton(g=>g.setButtonText("Refresh").onClick(async()=>{let p=this.plugin.getLocalRestApiKey();p?(this.plugin.settings.apiKey=p,await this.plugin.saveSettings(),new i.Notice("API Key refreshed successfully!"),this.display()):new i.Notice("Could not find API key. Ensure Local REST API plugin is installed and configured.")})),new i.Setting(e).setName("Smart Connections Integration").setDesc("Enable integration with Smart Connections plugin for semantic search").addToggle(g=>g.setValue(this.plugin.settings.smartConnectionsEnabled).onChange(async p=>{this.plugin.settings.smartConnectionsEnabled=p,await this.plugin.saveSettings()})),new i.Setting(e).setName("Log Level").setDesc("Logging verbosity level for debugging").addDropdown(g=>g.addOption("error","Error").addOption("warn","Warning").addOption("info","Info").addOption("debug","Debug").setValue(this.plugin.settings.logLevel).onChange(async p=>{this.plugin.settings.logLevel=p,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Dependencies"});let n=e.createEl("div"),a=(b=(u=this.app.plugins)==null?void 0:u.plugins)==null?void 0:b["obsidian-local-rest-api"],r=(A=(P=this.app.plugins)==null?void 0:P.plugins)==null?void 0:A["smart-connections"];n.innerHTML=`
      <div style="background: var(--background-secondary); padding: 1rem; border-radius: 6px; margin: 1rem 0;">
        <h4>\u{1F4E6} Required Dependencies:</h4>
        <ul>
          <li><strong>Local REST API:</strong> ${a?"\u2705 Installed":"\u274C Not installed (required)"}</li>
          <li><strong>Smart Connections:</strong> ${r?"\u2705 Installed":"\u26A0\uFE0F Optional (for semantic search)"}</li>
        </ul>
        
        ${a?"":'<p style="color: var(--text-error);">\u26A0\uFE0F Please install the "Local REST API" plugin to enable MCP communication.</p>'}
      </div>
    `,e.createEl("h3",{text:"MCP Integration Architecture"});let l=e.createEl("div");l.innerHTML=`
      <div style="background: var(--background-secondary); padding: 1rem; border-radius: 6px; margin: 1rem 0;">
        <h4>\u{1F3D7}\uFE0F How It Works:</h4>
        <ol>
          <li><strong>This Plugin:</strong> Provides vault integration commands and status</li>
          <li><strong>Local REST API Plugin:</strong> Exposes HTTP endpoints for vault access</li>
          <li><strong>External MCP Server:</strong> Runs separately, communicates via HTTP</li>
          <li><strong>Claude Desktop:</strong> Connects to the external MCP server</li>
        </ol>
        
        <h4>\u{1F527} Available Commands:</h4>
        <ul>
          <li><strong>Show Vault Information</strong> - Display vault details</li>
          <li><strong>Check MCP Dependencies</strong> - Verify required plugins</li>
          <li><strong>List Vault Files</strong> - Show files in your vault</li>
          <li><strong>Show Current File Details</strong> - Info about active file</li>
          <li><strong>Show File Backlinks</strong> - Display backlinks for current file</li>
          <li><strong>MCP Integration Guide</strong> - Complete setup instructions</li>
        </ul>

        <h4>\u{1F4A1} Next Steps:</h4>
        <p>1. Ensure Local REST API plugin is installed and running<br>
        2. Use 'Install MCP Server' command to set up the server<br>
        3. Use 'Configure Claude Desktop' command for automatic setup<br>
        4. Restart Claude Desktop and test the connection</p>
        
        <h4>\u{1F527} Current Status:</h4>
        <ul>
          <li><strong>API Key:</strong> ${this.plugin.settings.apiKey?"\u2705 Configured":"\u274C Missing"}</li>
          <li><strong>MCP Server:</strong> ${this.plugin.settings.serverInstalled?"\u2705 Installed":"\u274C Not Installed"}</li>
        </ul>
      </div>
    `}},S=class extends i.Modal{constructor(e,t){super(e);this.configText=t}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Claude Desktop Configuration"}),e.createEl("p",{text:"Copy this configuration to your claude_desktop_config.json file:"});let t=e.createEl("pre");t.style.background="var(--background-secondary)",t.style.padding="1rem",t.style.borderRadius="6px",t.style.fontSize="12px",t.style.overflow="auto",t.style.maxHeight="400px",t.textContent=this.configText;let n=e.createEl("div");n.style.textAlign="center",n.style.marginTop="1rem";let a=n.createEl("button",{text:"Copy to Clipboard"});a.onclick=()=>{navigator.clipboard.writeText(this.configText),new i.Notice("Configuration copied to clipboard!")}}onClose(){let{contentEl:e}=this;e.empty()}};
