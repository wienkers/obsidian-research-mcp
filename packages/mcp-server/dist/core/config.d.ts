import { z } from 'zod';
export declare const ConfigSchema: z.ZodObject<{
    obsidianApiUrl: z.ZodDefault<z.ZodString>;
    obsidianVaultPath: z.ZodOptional<z.ZodString>;
    obsidianApiKey: z.ZodDefault<z.ZodString>;
    smartConnectionsEnabled: z.ZodDefault<z.ZodBoolean>;
    smartConnectionsApiUrl: z.ZodOptional<z.ZodString>;
    serverPort: z.ZodDefault<z.ZodNumber>;
    maxSearchResults: z.ZodDefault<z.ZodNumber>;
    semanticSimilarityThreshold: z.ZodDefault<z.ZodNumber>;
    cacheEnabled: z.ZodDefault<z.ZodBoolean>;
    cacheTtl: z.ZodDefault<z.ZodNumber>;
    requestTimeout: z.ZodDefault<z.ZodNumber>;
    maxFileSize: z.ZodDefault<z.ZodNumber>;
    maxBatchSize: z.ZodDefault<z.ZodNumber>;
    maxDepth: z.ZodDefault<z.ZodNumber>;
    minConnections: z.ZodDefault<z.ZodNumber>;
    maxBatchOperations: z.ZodDefault<z.ZodNumber>;
    batchConcurrency: z.ZodDefault<z.ZodNumber>;
    openaiApiKey: z.ZodOptional<z.ZodString>;
    anthropicApiKey: z.ZodOptional<z.ZodString>;
    maxCompletionTokens: z.ZodDefault<z.ZodNumber>;
    maxSynthesisTokens: z.ZodDefault<z.ZodNumber>;
    maxEvidenceItems: z.ZodDefault<z.ZodNumber>;
    zoteroEnabled: z.ZodDefault<z.ZodBoolean>;
    zoteroApiKey: z.ZodOptional<z.ZodString>;
    zoteroUserId: z.ZodOptional<z.ZodString>;
    zoteroGroupId: z.ZodOptional<z.ZodString>;
    enableCors: z.ZodDefault<z.ZodBoolean>;
    allowedOrigins: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    logLevel: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug"]>>;
    logDir: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    obsidianApiUrl: string;
    obsidianApiKey: string;
    smartConnectionsEnabled: boolean;
    serverPort: number;
    maxSearchResults: number;
    semanticSimilarityThreshold: number;
    cacheEnabled: boolean;
    cacheTtl: number;
    requestTimeout: number;
    maxFileSize: number;
    maxBatchSize: number;
    maxDepth: number;
    minConnections: number;
    maxBatchOperations: number;
    batchConcurrency: number;
    maxCompletionTokens: number;
    maxSynthesisTokens: number;
    maxEvidenceItems: number;
    zoteroEnabled: boolean;
    enableCors: boolean;
    allowedOrigins: string[];
    logLevel: "error" | "warn" | "info" | "debug";
    logDir: string;
    obsidianVaultPath?: string | undefined;
    smartConnectionsApiUrl?: string | undefined;
    openaiApiKey?: string | undefined;
    anthropicApiKey?: string | undefined;
    zoteroApiKey?: string | undefined;
    zoteroUserId?: string | undefined;
    zoteroGroupId?: string | undefined;
}, {
    obsidianApiUrl?: string | undefined;
    obsidianVaultPath?: string | undefined;
    obsidianApiKey?: string | undefined;
    smartConnectionsEnabled?: boolean | undefined;
    smartConnectionsApiUrl?: string | undefined;
    serverPort?: number | undefined;
    maxSearchResults?: number | undefined;
    semanticSimilarityThreshold?: number | undefined;
    cacheEnabled?: boolean | undefined;
    cacheTtl?: number | undefined;
    requestTimeout?: number | undefined;
    maxFileSize?: number | undefined;
    maxBatchSize?: number | undefined;
    maxDepth?: number | undefined;
    minConnections?: number | undefined;
    maxBatchOperations?: number | undefined;
    batchConcurrency?: number | undefined;
    openaiApiKey?: string | undefined;
    anthropicApiKey?: string | undefined;
    maxCompletionTokens?: number | undefined;
    maxSynthesisTokens?: number | undefined;
    maxEvidenceItems?: number | undefined;
    zoteroEnabled?: boolean | undefined;
    zoteroApiKey?: string | undefined;
    zoteroUserId?: string | undefined;
    zoteroGroupId?: string | undefined;
    enableCors?: boolean | undefined;
    allowedOrigins?: string[] | undefined;
    logLevel?: "error" | "warn" | "info" | "debug" | undefined;
    logDir?: string | undefined;
}>;
export declare const config: {
    obsidianApiUrl: string;
    obsidianApiKey: string;
    smartConnectionsEnabled: boolean;
    serverPort: number;
    maxSearchResults: number;
    semanticSimilarityThreshold: number;
    cacheEnabled: boolean;
    cacheTtl: number;
    requestTimeout: number;
    maxFileSize: number;
    maxBatchSize: number;
    maxDepth: number;
    minConnections: number;
    maxBatchOperations: number;
    batchConcurrency: number;
    maxCompletionTokens: number;
    maxSynthesisTokens: number;
    maxEvidenceItems: number;
    zoteroEnabled: boolean;
    enableCors: boolean;
    allowedOrigins: string[];
    logLevel: "error" | "warn" | "info" | "debug";
    logDir: string;
    obsidianVaultPath?: string | undefined;
    smartConnectionsApiUrl?: string | undefined;
    openaiApiKey?: string | undefined;
    anthropicApiKey?: string | undefined;
    zoteroApiKey?: string | undefined;
    zoteroUserId?: string | undefined;
    zoteroGroupId?: string | undefined;
};
export type Config = z.infer<typeof ConfigSchema>;
//# sourceMappingURL=config.d.ts.map